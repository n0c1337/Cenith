#ifndef LEXER_H
#define LEXER_H

#include <allocator.h>
#include <hstring.h>

extern Allocator global_allocator;

typedef enum Tokens_t {
    TOKEN_INVALID = -1,
    // Keywords
    TOKEN_KEYWORD_I8,
    TOKEN_KEYWORD_I16,
    TOKEN_KEYWORD_I32,
    TOKEN_KEYWORD_I64,
    TOKEN_KEYWORD_FLOAT,
    TOKEN_KEYWORD_VOID,
    TOKEN_KEYWORD_IF,
    TOKEN_KEYWORD_ELSE,
    TOKEN_KEYWORD_FOR,
    TOKEN_KEYWORD_WHILE,
    TOKEN_KEYWORD_RETURN,
    TOKEN_KEYWORD_EXTERN,
    // Identifiers
    TOKEN_IDENTIFIER,
    TOKEN_IDENTIFIER_TYPE,
    TOKEN_IDENTIFIER_ARRAY,
    TOKEN_IDENTIFIER_POINTER,
    TOKEN_IDENTIFIER_COMPARISON,
    TOKEN_IDENTIFIER_FUNCTION_CALL,
    TOKEN_IDENTIFIER_CONTROL_STRUCTURE,
    // Literals
    TOKEN_LITERAL_INTEGER,
    TOKEN_LITERAL_FLOAT,
    TOKEN_LITERAL_STRING,
    TOKEN_LITERAL_ARRAY,
    // Comparison
    TOKEN_KEYWORD_LESS,
    TOKEN_KEYWORD_LESS_EQUALS,
    TOKEN_KEYWORD_EQUALS,
    TOKEN_KEYWORD_NOT_EQUALS,
    TOKEN_KEYWORD_GREATER,
    TOKEN_KEYWORD_GREATER_EQUALS,
    // Operators
    TOKEN_KEYWORD_PLUS,
    TOKEN_KEYWORD_PLUSPLUS,
    TOKEN_KEYWORD_MINUS,
    TOKEN_KEYWORD_MINUSMINUS,
    TOKEN_KEYWORD_MULTIPLY,
    TOKEN_KEYWORD_DIVISION,
    TOKEN_KEYWORD_ASSIGNMENT,
    // Bitwise Operators
    TOKEN_KEYWORD_BITWISE_AND,
    TOKEN_KEYWORD_BITWISE_OR,
    TOKEN_KEYWORD_BITWISE_XOR,
    TOKEN_KEYWORD_BITWISE_NOT,
    TOKEN_KEYWORD_BITWISE_SHL,
    TOKEN_KEYWORD_BITWISE_SHR,
    // Grammatical characters
    TOKEN_KEYWORD_ROUND_BRACKET_OEPN,
    TOKEN_KEYWORD_ROUND_BRACKET_CLOSED,
    TOKEN_KEYWORD_SQUARED_BRACKET_OPEN,
    TOKEN_KEYWORD_SQUARED_BRACKET_CLOSED,
    TOKEN_KEYWORD_CURLY_BRACKET_OPEN,
    TOKEN_KEYWORD_CURLY_BRACKET_CLOSED,
    TOKEN_KEYWORD_SEMICOLON,
    TOKEN_KEYWORD_WHITESPACAE,
} Tokens;

typedef struct Token_t {
    Tokens type;
    Tokens identifier;
    char* content;
    long size;
    int is_pointer;
} Token;

typedef struct Mapping_t {
    char* content;
    Tokens type;
    Tokens identifier;
} Mapping;

Token lexer_lex(char* content);
Token lexer_is_keyword(char* keyword);
Token lexer_lex_single(char ch);
int lexer_is_delimiter_char(char ch);

#endif